-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity StreamingDataflowPartition_0_IODMA_hls_0_StreamingDataWidthConverter_Batch_64u_8u_98u_Pipeline_VITIS_LOOP_526_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dma2dwc_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    dma2dwc_empty_n : IN STD_LOGIC;
    dma2dwc_read : OUT STD_LOGIC;
    dma2dwc_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    dma2dwc_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    out_V_TREADY : IN STD_LOGIC;
    totalIters : IN STD_LOGIC_VECTOR (31 downto 0);
    out_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_V_TVALID : OUT STD_LOGIC );
end;


architecture behav of StreamingDataflowPartition_0_IODMA_hls_0_StreamingDataWidthConverter_Batch_64u_8u_98u_Pipeline_VITIS_LOOP_526_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_iter0_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_ST_iter1_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_iter1_fsm_state0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv56_0 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_iter0_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal ap_CS_iter0_fsm_state1 : STD_LOGIC;
    signal ap_CS_iter1_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    signal ap_CS_iter1_fsm_state0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln526_reg_203 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln526_reg_203_pp0_iter0_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln529_reg_207 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln529_reg_207_pp0_iter0_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op31_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_CS_iter1_fsm_state2 : STD_LOGIC;
    signal icmp_ln526_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal out_V_TDATA_blk_n : STD_LOGIC;
    signal dma2dwc_blk_n : STD_LOGIC;
    signal icmp_ln529_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_ei_1_phi_fu_78_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter1_ei_1_reg_75 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln526_fu_157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ei_fu_44 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000000";
    signal ap_loop_init : STD_LOGIC;
    signal o_fu_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal o_5_fu_136_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_o_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_fu_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal t_1_fu_112_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_t_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_4_fu_124_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln540_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_iter0_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_iter1_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_iter0_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_iter1_fsm_state2_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_67 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component StreamingDataflowPartition_0_IODMA_hls_0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component StreamingDataflowPartition_0_IODMA_hls_0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_iter0_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            else
                ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
            end if;
        end if;
    end process;


    ap_CS_iter1_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
            else
                ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state2_pp0_stage0_iter1) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2_pp0_stage0_iter1) and (ap_loop_exit_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif ((not(((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ei_fu_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                ei_fu_44 <= ap_const_lv56_0;
            elsif (((ap_const_boolean_0 = ap_block_state2_pp0_stage0_iter1) and (icmp_ln526_reg_203 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then 
                ei_fu_44 <= ap_phi_mux_ei_1_phi_fu_78_p4(63 downto 8);
            end if; 
        end if;
    end process;

    o_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_67)) then
                if ((icmp_ln526_fu_106_p2 = ap_const_lv1_0)) then 
                    o_fu_48 <= o_5_fu_136_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    o_fu_48 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    t_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_67)) then
                if ((icmp_ln526_fu_106_p2 = ap_const_lv1_0)) then 
                    t_fu_52 <= t_1_fu_112_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    t_fu_52 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                icmp_ln526_reg_203 <= icmp_ln526_fu_106_p2;
                icmp_ln529_reg_207 <= icmp_ln529_fu_118_p2;
            end if;
        end if;
    end process;

    ap_NS_iter0_fsm_assign_proc : process (ap_CS_iter0_fsm, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_CS_iter1_fsm_state2)
    begin
        case ap_CS_iter0_fsm is
            when ap_ST_iter0_fsm_state1 => 
                ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            when others =>  
                ap_NS_iter0_fsm <= "X";
        end case;
    end process;

    ap_NS_iter1_fsm_assign_proc : process (ap_CS_iter0_fsm_state1, ap_CS_iter1_fsm, ap_block_state1_pp0_stage0_iter0, icmp_ln526_reg_203_pp0_iter0_reg, ap_block_state2_pp0_stage0_iter1, ap_CS_iter1_fsm_state2)
    begin
        case ap_CS_iter1_fsm is
            when ap_ST_iter1_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_pp0_stage0_iter1) and ((ap_const_logic_0 = ap_CS_iter0_fsm_state1) or ((ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0))))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                elsif ((((ap_const_boolean_0 = ap_block_state2_pp0_stage0_iter1) and (icmp_ln526_reg_203_pp0_iter0_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2)) or ((ap_const_boolean_0 = ap_block_state2_pp0_stage0_iter1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1)))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                end if;
            when ap_ST_iter1_fsm_state0 => 
                if ((not(((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                end if;
            when others =>  
                ap_NS_iter1_fsm <= "XX";
        end case;
    end process;
    ap_CS_iter0_fsm_state1 <= ap_CS_iter0_fsm(0);
    ap_CS_iter1_fsm_state0 <= ap_CS_iter1_fsm(0);
    ap_CS_iter1_fsm_state2 <= ap_CS_iter1_fsm(1);

    ap_ST_iter0_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_iter0_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_iter0_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_iter1_fsm_state2_blk_assign_proc : process(ap_block_state2_pp0_stage0_iter1)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) then 
            ap_ST_iter1_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_iter1_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(dma2dwc_empty_n, icmp_ln526_reg_203, ap_predicate_op31_read_state2, out_V_TREADY)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((out_V_TREADY = ap_const_logic_0) and (icmp_ln526_reg_203 = ap_const_lv1_0)) or ((ap_predicate_op31_read_state2 = ap_const_boolean_1) and (dma2dwc_empty_n = ap_const_logic_0)));
    end process;


    ap_condition_67_assign_proc : process(ap_CS_iter0_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_CS_iter1_fsm_state2)
    begin
                ap_condition_67 <= (not(((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_iter0_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_CS_iter1_fsm_state2, icmp_ln526_fu_106_p2)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)))) and (icmp_ln526_fu_106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_state2_pp0_stage0_iter1, ap_CS_iter1_fsm_state2, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_pp0_stage0_iter1) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_iter0_fsm_state1, ap_CS_iter1_fsm_state0, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_iter1_fsm_state0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_ei_1_phi_fu_78_p4_assign_proc : process(dma2dwc_dout, icmp_ln526_reg_203, icmp_ln529_reg_207, icmp_ln529_reg_207_pp0_iter0_reg, ap_phi_reg_pp0_iter1_ei_1_reg_75, zext_ln526_fu_157_p1)
    begin
        if ((icmp_ln526_reg_203 = ap_const_lv1_0)) then
            if ((icmp_ln529_reg_207_pp0_iter0_reg = ap_const_lv1_0)) then 
                ap_phi_mux_ei_1_phi_fu_78_p4 <= zext_ln526_fu_157_p1;
            elsif ((icmp_ln529_reg_207 = ap_const_lv1_1)) then 
                ap_phi_mux_ei_1_phi_fu_78_p4 <= dma2dwc_dout;
            else 
                ap_phi_mux_ei_1_phi_fu_78_p4 <= ap_phi_reg_pp0_iter1_ei_1_reg_75;
            end if;
        else 
            ap_phi_mux_ei_1_phi_fu_78_p4 <= ap_phi_reg_pp0_iter1_ei_1_reg_75;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_ei_1_reg_75 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op31_read_state2_assign_proc : process(icmp_ln526_reg_203, icmp_ln529_reg_207)
    begin
                ap_predicate_op31_read_state2 <= ((icmp_ln529_reg_207 = ap_const_lv1_1) and (icmp_ln526_reg_203 = ap_const_lv1_0));
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_iter0_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_CS_iter1_fsm_state2)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0) or ((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_o_3_assign_proc : process(ap_CS_iter0_fsm_state1, ap_loop_init, o_fu_48)
    begin
        if (((ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_o_3 <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_o_3 <= o_fu_48;
        end if; 
    end process;


    ap_sig_allocacmp_t_2_assign_proc : process(ap_CS_iter0_fsm_state1, ap_loop_init, t_fu_52)
    begin
        if (((ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_t_2 <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_t_2 <= t_fu_52;
        end if; 
    end process;


    dma2dwc_blk_n_assign_proc : process(dma2dwc_empty_n, ap_predicate_op31_read_state2, ap_CS_iter1_fsm_state2)
    begin
        if (((ap_predicate_op31_read_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then 
            dma2dwc_blk_n <= dma2dwc_empty_n;
        else 
            dma2dwc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dma2dwc_read_assign_proc : process(ap_predicate_op31_read_state2, ap_block_state2_pp0_stage0_iter1, ap_CS_iter1_fsm_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_pp0_stage0_iter1) and (ap_predicate_op31_read_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then 
            dma2dwc_read <= ap_const_logic_1;
        else 
            dma2dwc_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln526_fu_106_p2 <= "1" when (ap_sig_allocacmp_t_2 = totalIters) else "0";
    icmp_ln526_reg_203_pp0_iter0_reg <= icmp_ln526_reg_203;
    icmp_ln529_fu_118_p2 <= "1" when (ap_sig_allocacmp_o_3 = ap_const_lv32_0) else "0";
    icmp_ln529_reg_207_pp0_iter0_reg <= icmp_ln529_reg_207;
    icmp_ln540_fu_130_p2 <= "1" when (o_4_fu_124_p2 = ap_const_lv32_8) else "0";
    o_4_fu_124_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_o_3) + unsigned(ap_const_lv32_1));
    o_5_fu_136_p3 <= 
        ap_const_lv32_0 when (icmp_ln540_fu_130_p2(0) = '1') else 
        o_4_fu_124_p2;
    out_V_TDATA <= ap_phi_mux_ei_1_phi_fu_78_p4(8 - 1 downto 0);

    out_V_TDATA_blk_n_assign_proc : process(icmp_ln526_reg_203, out_V_TREADY, ap_CS_iter1_fsm_state2)
    begin
        if (((icmp_ln526_reg_203 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then 
            out_V_TDATA_blk_n <= out_V_TREADY;
        else 
            out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_V_TVALID_assign_proc : process(icmp_ln526_reg_203, ap_block_state2_pp0_stage0_iter1, ap_CS_iter1_fsm_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_pp0_stage0_iter1) and (icmp_ln526_reg_203 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then 
            out_V_TVALID <= ap_const_logic_1;
        else 
            out_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    t_1_fu_112_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_t_2) + unsigned(ap_const_lv32_1));
    zext_ln526_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ei_fu_44),64));
end behav;

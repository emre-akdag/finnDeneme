// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module StreamingDataflowPartition_0_IODMA_hls_0_StreamingDataWidthConverter_Batch_64u_8u_98u_Pipeline_VITIS_LOOP_526_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dma2dwc_dout,
        dma2dwc_empty_n,
        dma2dwc_read,
        dma2dwc_num_data_valid,
        dma2dwc_fifo_cap,
        out_V_TREADY,
        totalIters,
        out_V_TDATA,
        out_V_TVALID
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] dma2dwc_dout;
input   dma2dwc_empty_n;
output   dma2dwc_read;
input  [2:0] dma2dwc_num_data_valid;
input  [2:0] dma2dwc_fifo_cap;
input   out_V_TREADY;
input  [31:0] totalIters;
output  [7:0] out_V_TDATA;
output   out_V_TVALID;

reg ap_idle;
reg dma2dwc_read;
reg out_V_TVALID;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln526_reg_203;
wire   [0:0] icmp_ln526_reg_203_pp0_iter0_reg;
reg   [0:0] icmp_ln529_reg_207;
wire   [0:0] icmp_ln529_reg_207_pp0_iter0_reg;
reg    ap_predicate_op31_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
wire   [0:0] icmp_ln526_fu_106_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    out_V_TDATA_blk_n;
reg    dma2dwc_blk_n;
wire   [0:0] icmp_ln529_fu_118_p2;
reg   [63:0] ap_phi_mux_ei_1_phi_fu_78_p4;
wire   [63:0] ap_phi_reg_pp0_iter1_ei_1_reg_75;
wire   [63:0] zext_ln526_fu_157_p1;
reg   [55:0] ei_fu_44;
wire    ap_loop_init;
reg   [31:0] o_fu_48;
wire   [31:0] o_5_fu_136_p3;
reg   [31:0] ap_sig_allocacmp_o_3;
reg   [31:0] t_fu_52;
wire   [31:0] t_1_fu_112_p2;
reg   [31:0] ap_sig_allocacmp_t_2;
wire   [31:0] o_4_fu_124_p2;
wire   [0:0] icmp_ln540_fu_130_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_67;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_iter0_fsm = 1'd1;
#0 ap_CS_iter1_fsm = 2'd1;
#0 ei_fu_44 = 56'd0;
#0 o_fu_48 = 32'd0;
#0 t_fu_52 = 32'd0;
#0 ap_done_reg = 1'b0;
end

StreamingDataflowPartition_0_IODMA_hls_0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (ap_loop_exit_ready == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ei_fu_44 <= 56'd0;
    end else if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (icmp_ln526_reg_203 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ei_fu_44 <= {{ap_phi_mux_ei_1_phi_fu_78_p4[63:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_67)) begin
        if ((icmp_ln526_fu_106_p2 == 1'd0)) begin
            o_fu_48 <= o_5_fu_136_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            o_fu_48 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_67)) begin
        if ((icmp_ln526_fu_106_p2 == 1'd0)) begin
            t_fu_52 <= t_1_fu_112_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            t_fu_52 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        icmp_ln526_reg_203 <= icmp_ln526_fu_106_p2;
        icmp_ln529_reg_207 <= icmp_ln529_fu_118_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (icmp_ln526_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln526_reg_203 == 1'd0)) begin
        if ((icmp_ln529_reg_207_pp0_iter0_reg == 1'd0)) begin
            ap_phi_mux_ei_1_phi_fu_78_p4 = zext_ln526_fu_157_p1;
        end else if ((icmp_ln529_reg_207 == 1'd1)) begin
            ap_phi_mux_ei_1_phi_fu_78_p4 = dma2dwc_dout;
        end else begin
            ap_phi_mux_ei_1_phi_fu_78_p4 = ap_phi_reg_pp0_iter1_ei_1_reg_75;
        end
    end else begin
        ap_phi_mux_ei_1_phi_fu_78_p4 = ap_phi_reg_pp0_iter1_ei_1_reg_75;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_o_3 = 32'd0;
    end else begin
        ap_sig_allocacmp_o_3 = o_fu_48;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_t_2 = 32'd0;
    end else begin
        ap_sig_allocacmp_t_2 = t_fu_52;
    end
end

always @ (*) begin
    if (((ap_predicate_op31_read_state2 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        dma2dwc_blk_n = dma2dwc_empty_n;
    end else begin
        dma2dwc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (ap_predicate_op31_read_state2 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        dma2dwc_read = 1'b1;
    end else begin
        dma2dwc_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln526_reg_203 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        out_V_TDATA_blk_n = out_V_TREADY;
    end else begin
        out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & (icmp_ln526_reg_203 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        out_V_TVALID = 1'b1;
    end else begin
        out_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_pp0_stage0_iter1) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else if ((((1'b0 == ap_block_state2_pp0_stage0_iter1) & (icmp_ln526_reg_203_pp0_iter0_reg == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2)) | ((1'b0 == ap_block_state2_pp0_stage0_iter1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1)))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((out_V_TREADY == 1'b0) & (icmp_ln526_reg_203 == 1'd0)) | ((ap_predicate_op31_read_state2 == 1'b1) & (dma2dwc_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_67 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter1_ei_1_reg_75 = 'bx;

always @ (*) begin
    ap_predicate_op31_read_state2 = ((icmp_ln529_reg_207 == 1'd1) & (icmp_ln526_reg_203 == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign icmp_ln526_fu_106_p2 = ((ap_sig_allocacmp_t_2 == totalIters) ? 1'b1 : 1'b0);

assign icmp_ln526_reg_203_pp0_iter0_reg = icmp_ln526_reg_203;

assign icmp_ln529_fu_118_p2 = ((ap_sig_allocacmp_o_3 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln529_reg_207_pp0_iter0_reg = icmp_ln529_reg_207;

assign icmp_ln540_fu_130_p2 = ((o_4_fu_124_p2 == 32'd8) ? 1'b1 : 1'b0);

assign o_4_fu_124_p2 = (ap_sig_allocacmp_o_3 + 32'd1);

assign o_5_fu_136_p3 = ((icmp_ln540_fu_130_p2[0:0] == 1'b1) ? 32'd0 : o_4_fu_124_p2);

assign out_V_TDATA = ap_phi_mux_ei_1_phi_fu_78_p4[7:0];

assign t_1_fu_112_p2 = (ap_sig_allocacmp_t_2 + 32'd1);

assign zext_ln526_fu_157_p1 = ei_fu_44;

endmodule //StreamingDataflowPartition_0_IODMA_hls_0_StreamingDataWidthConverter_Batch_64u_8u_98u_Pipeline_VITIS_LOOP_526_1

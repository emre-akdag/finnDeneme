-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingDataflowPartition_1_MVAU_hls_0_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_14_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 17; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of StreamingDataflowPartition_1_MVAU_hls_0_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_14_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "01110110001011001", 1 => "01101100110100011", 2 => "01100100011010100", 3 => "01111100110111011", 
    4 => "10010101100101000", 5 => "10001111111111111", 6 => "10011100110000100", 7 => "10000011000111001", 
    8 => "01100111000000110", 9 => "01111010100011011", 10 => "01010000111000111", 11 => "01010011001101101", 
    12 => "10101101011110010", 13 => "10010010000000100", 14 => "01011001110000010", 15 => "01110110011001101", 
    16 => "11000111110101001", 17 => "01010111011010101", 18 => "01100010111101000", 19 => "01011011011100010", 
    20 => "01100000110100001", 21 => "01101111010111001", 22 => "11000011000111000", 23 => "01111001101010000", 
    24 => "01100011111001101", 25 => "10011111010010000", 26 => "10000111010111111", 27 => "10010111000001100", 
    28 => "01010100000111011", 29 => "01100100001010100", 30 => "01100000101110110", 31 => "10011110000111100", 
    32 => "10001000001011101", 33 => "01110100010000110", 34 => "01111110110010101", 35 => "01101100101110000", 
    36 => "01110100100001010", 37 => "01011100111000000", 38 => "01110110100101011", 39 => "01100000011011111", 
    40 => "10001010011101101", 41 => "01011000001010011", 42 => "01110101011100000", 43 => "01001111011101010", 
    44 => "01101101101100011", 45 => "01101010101110101", 46 => "01111110000011111", 47 => "01100000011100011", 
    48 => "01110110110100001", 49 => "01011011011101010", 50 => "01100011001100110", 51 => "01011111101101100", 
    52 => "11010100110111000", 53 => "01010001011111000", 54 => "01110110001111000", 55 => "01100010110000101", 
    56 => "01110100001000011", 57 => "01110100110001011", 58 => "01100101011100001", 59 => "10010001100101100", 
    60 => "11001100111011100", 61 => "01111011010111000", 62 => "01100001110010100", 63 => "01010001101010110");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;


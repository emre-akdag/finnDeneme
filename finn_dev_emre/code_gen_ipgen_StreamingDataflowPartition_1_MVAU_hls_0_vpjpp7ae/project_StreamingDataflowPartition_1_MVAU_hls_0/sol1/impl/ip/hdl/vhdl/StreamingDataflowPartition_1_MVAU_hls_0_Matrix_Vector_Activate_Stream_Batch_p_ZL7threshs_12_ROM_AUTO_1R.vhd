-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingDataflowPartition_1_MVAU_hls_0_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_12_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 17; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of StreamingDataflowPartition_1_MVAU_hls_0_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_12_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "01100111010011101", 1 => "01011101110100110", 2 => "01010101011000101", 3 => "01101001100101001", 
    4 => "01111111001110011", 5 => "01111101000100110", 6 => "10000100111011100", 7 => "01101111101101111", 
    8 => "01011001001001101", 9 => "01101010001101101", 10 => "01000100111101000", 11 => "01000110101000011", 
    12 => "10010010110101100", 13 => "01111011111001111", 14 => "01001101000011010", 15 => "01100101011100010", 
    16 => "10101001000100011", 17 => "01001011011001100", 18 => "01010011110000111", 19 => "01001110111110000", 
    20 => "01010010100000011", 21 => "01011110111100111", 22 => "10100111011010100", 23 => "01101001110011011", 
    24 => "01010111000110000", 25 => "10000110111110000", 26 => "01110101100011001", 27 => "10000011001011111", 
    28 => "01001000010000001", 29 => "01010101010101101", 30 => "01010100010111111", 31 => "10000100111010110", 
    32 => "01110110000001010", 33 => "01100100000110111", 34 => "01101101011101111", 35 => "01011110010011010", 
    36 => "01100101111110111", 37 => "01010000011101010", 38 => "01100100001111110", 39 => "01010010011010000", 
    40 => "01111001000110111", 41 => "01001100001111011", 42 => "01100111100010001", 43 => "01000010011101010", 
    44 => "01011110000011111", 45 => "01011100011110011", 46 => "01101111101000011", 47 => "01010001111011100", 
    48 => "01100110000010100", 49 => "01001111000001111", 50 => "01010101000111010", 51 => "01010010011110001", 
    52 => "10110110011101001", 53 => "01000101111010111", 54 => "01100111011011010", 55 => "01010011011101100", 
    56 => "01100010010011100", 57 => "01100001101110001", 58 => "01010111101011101", 59 => "01111010111101110", 
    60 => "10101111010101000", 61 => "01101000111001101", 62 => "01010011101011101", 63 => "01000101110010011");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;


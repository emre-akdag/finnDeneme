-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingDataflowPartition_1_MVAU_hls_0_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_0_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 15; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of StreamingDataflowPartition_1_MVAU_hls_0_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_0_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "001110000110110", 1 => "000011110111011", 2 => "111011001101101", 3 => "110101110111011", 
    4 => "111001000110001", 5 => "001011100001100", 6 => "110101111101101", 7 => "111011010110001", 
    8 => "000101111111011", 9 => "001000001011101", 10 => "111101010110000", 11 => "111011001001000", 
    12 => "110011000000010", 13 => "110111010010101", 14 => "000000110100110", 15 => "111111101100001", 
    16 => "110000011111110", 17 => "000011010010110", 18 => "111000101000010", 19 => "000100001000101", 
    20 => "111100101001100", 21 => "111100011110111", 22 => "000001001111101", 23 => "001010101100010", 
    24 => "001010010000011", 25 => "110101000110100", 26 => "001010100110000", 27 => "001100001010011", 
    28 => "000001000101000", 29 => "111100010111101", 30 => "001010001111000", 31 => "101101101101111", 
    32 => "001001000011001", 33 => "000011001011100", 34 => "000101100001000", 35 => "000111110010101", 
    36 => "001110110000111", 37 => "000101111101001", 38 => "110110001101101", 39 => "111110001111001", 
    40 => "010000111110010", 41 => "000100101101101", 42 => "010100000111000", 43 => "110100011101010", 
    44 => "000000010001010", 45 => "000110111100001", 46 => "011001000010111", 47 => "111010110110000", 
    48 => "000001011000001", 49 => "000100011110001", 50 => "000000100101110", 51 => "000011000010001", 
    52 => "000000000001101", 53 => "000000100010000", 54 => "001110100100011", 55 => "110111101011010", 
    56 => "110111010110100", 57 => "101111011010011", 58 => "000101001001001", 59 => "110011001111000", 
    60 => "111101101101110", 61 => "111010001001001", 62 => "111111000010010", 63 => "111110100000011");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;


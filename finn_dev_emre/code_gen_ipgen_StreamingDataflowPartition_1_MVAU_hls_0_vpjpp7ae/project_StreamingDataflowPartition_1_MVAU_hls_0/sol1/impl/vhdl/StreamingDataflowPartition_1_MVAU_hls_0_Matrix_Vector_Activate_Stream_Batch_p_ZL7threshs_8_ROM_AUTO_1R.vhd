-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingDataflowPartition_1_MVAU_hls_0_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_8_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 16; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of StreamingDataflowPartition_1_MVAU_hls_0_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_8_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1001001100100101", 1 => "0111111110101101", 2 => "0110111010101000", 3 => "1000011000000100", 
    4 => "1010010100000111", 5 => "1010111001110010", 6 => "1010101010001100", 7 => "1001000111011010", 
    8 => "0111101011011100", 9 => "1001001100010011", 10 => "0101101000101011", 11 => "0101101011101111", 
    12 => "1011101100011110", 13 => "1001111101100111", 14 => "0110011101001001", 15 => "1000011100001100", 
    16 => "1101011100010110", 17 => "0110011010111010", 18 => "0110101011000101", 19 => "0110110000001100", 
    20 => "0110101111000110", 21 => "0111110001000001", 22 => "1110000000001100", 23 => "1001010000110011", 
    24 => "0111101011110110", 25 => "1010110010110010", 26 => "1010001111001011", 27 => "1011011100000110", 
    28 => "0110000100001110", 29 => "0110111101011101", 30 => "0111011101010010", 31 => "1010010100001001", 
    32 => "1010001101100100", 33 => "1000011110011001", 34 => "1001010110100010", 35 => "1000001011101101", 
    36 => "1001000111010010", 37 => "0110111100111111", 38 => "0111111100100011", 39 => "0110110010110011", 
    40 => "1010110011001011", 41 => "0110100011001100", 42 => "1001011101110011", 43 => "0101000011101010", 
    44 => "0111110110011000", 45 => "0111111111101101", 46 => "1010010110001010", 47 => "0110100111001101", 
    48 => "1000100011111000", 49 => "0110110001011011", 50 => "0111000111100001", 51 => "0110111111111100", 
    52 => "1111001101001010", 53 => "0101110110010101", 54 => "1001001110011101", 55 => "0110100110111011", 
    56 => "0111110101001111", 57 => "0111011100111100", 58 => "0111100001010110", 59 => "1001101101110001", 
    60 => "1110100000111111", 61 => "1000011111110110", 62 => "0110111011101110", 63 => "0101110000001110");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;


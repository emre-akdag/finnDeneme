-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingDataflowPartition_1_MVAU_hls_0_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_2_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 15; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of StreamingDataflowPartition_1_MVAU_hls_0_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_2_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "011100111110010", 1 => "010010110110111", 2 => "001010001111100", 3 => "001001001001101", 
    4 => "001111011100110", 5 => "011110011100101", 6 => "001101110010101", 7 => "001110101111100", 
    8 => "010011110110011", 9 => "011000100001010", 10 => "001001010001110", 11 => "000111101110010", 
    12 => "001101101001001", 13 => "001101011001010", 14 => "001101100001111", 15 => "010000101001100", 
    16 => "001111010000100", 17 => "001111010011111", 18 => "000111110100011", 19 => "010000100110110", 
    20 => "001010111101011", 21 => "001100111001001", 22 => "011100111100001", 23 => "011010100010110", 
    24 => "010111000100000", 25 => "001101011010011", 26 => "011100011010111", 27 => "100000000000000", 
    28 => "001100111100001", 29 => "001011001100101", 30 => "010110100101111", 31 => "000110111010101", 
    32 => "011011001101100", 33 => "010011010101011", 34 => "010110110101111", 35 => "010110001101011", 
    36 => "011101010011001", 37 => "010010010111111", 38 => "001000100011010", 39 => "001100010001000", 
    40 => "100010010101000", 41 => "010000101000101", 42 => "100010000000111", 43 => "000001011101010", 
    44 => "001111111001110", 45 => "010101001100100", 46 => "100111011110100", 47 => "001001010110111", 
    48 => "010010001001111", 49 => "010000111001011", 50 => "001110101011011", 51 => "010000010001100", 
    52 => "011110011011100", 53 => "001100000110001", 54 => "011101011000001", 55 => "000110111110010", 
    56 => "001001001011011", 57 => "000010011101101", 58 => "010010111001100", 59 => "001001110110110", 
    60 => "011011010100011", 61 => "001100100110101", 62 => "001101001001001", 63 => "001010011000110");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;


-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingDataflowPartition_1_MVAU_hls_0_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_9_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 17; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of StreamingDataflowPartition_1_MVAU_hls_0_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_9_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "01010001000000011", 1 => "01000111010101100", 2 => "00111110110101111", 3 => "01001100101001101", 
    4 => "01011101101100010", 5 => "01100000101011111", 6 => "01100001001100000", 7 => "01010010100111111", 
    8 => "01000100010111001", 9 => "01010001101101001", 10 => "00110011000011010", 11 => "00110011110000100", 
    12 => "01101010111000001", 13 => "01011010110000001", 14 => "00111001111111101", 15 => "01001100000000010", 
    16 => "01111010111011001", 17 => "00111001010111111", 18 => "00111100111110110", 19 => "00111100010000101", 
    20 => "00111101000010101", 21 => "01000110010101011", 22 => "01111101110111110", 23 => "01010010000001101", 
    24 => "01000011111000101", 25 => "01100010100000001", 26 => "01011010110011111", 27 => "01100101011011100", 
    28 => "00110110011101011", 29 => "00111111000110001", 30 => "01000001110101110", 31 => "01011111000111100", 
    32 => "01011010110001110", 33 => "01001011111000000", 34 => "01010011011110101", 35 => "01001000101011000", 
    36 => "01010000001011011", 37 => "00111101110101010", 38 => "01001000101111010", 39 => "00111101010111011", 
    40 => "01011111000100110", 41 => "00111010010111000", 42 => "01010010101011011", 43 => "00101110111101010", 
    44 => "01000110100111010", 45 => "01000111000101110", 46 => "01011001111111000", 47 => "00111100001010001", 
    48 => "01001100110111111", 49 => "00111100011001000", 50 => "00111111111110111", 51 => "00111110100111001", 
    52 => "10001000110110010", 53 => "00110100100100101", 54 => "01010001001101100", 55 => "00111100100001000", 
    56 => "01000111100100010", 57 => "01000101001001001", 58 => "01000011000011000", 59 => "01011001000010000", 
    60 => "10000010111011010", 61 => "01001101001101100", 62 => "00111110100001010", 63 => "00110011111101111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;


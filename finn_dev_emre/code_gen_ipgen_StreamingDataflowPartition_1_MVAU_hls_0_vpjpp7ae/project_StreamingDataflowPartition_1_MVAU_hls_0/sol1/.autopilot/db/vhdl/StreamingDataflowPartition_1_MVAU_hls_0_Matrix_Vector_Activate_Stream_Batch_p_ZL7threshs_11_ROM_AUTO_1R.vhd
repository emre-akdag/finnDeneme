-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingDataflowPartition_1_MVAU_hls_0_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_11_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 17; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of StreamingDataflowPartition_1_MVAU_hls_0_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_11_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "01011111110111111", 1 => "01010110010101000", 2 => "01001101110111110", 3 => "01011111111100000", 
    4 => "01110100000011000", 5 => "01110011100111001", 6 => "01111001000001000", 7 => "01100110000001001", 
    8 => "01010010001110001", 9 => "01100010000010111", 10 => "00111110111111001", 11 => "01000000010101110", 
    12 => "10000101100001000", 13 => "01110000110110101", 14 => "01000110101100101", 15 => "01011100111101101", 
    16 => "10011001101100000", 17 => "01000101011001000", 18 => "01001100001010110", 19 => "01001000101110111", 
    20 => "01001011010110100", 21 => "01010110101111101", 22 => "10011001100100010", 23 => "01100001111000001", 
    24 => "01010000101100001", 25 => "01111010110100001", 26 => "01101100101000101", 27 => "01111001010001001", 
    28 => "01000010010100100", 29 => "01001101111011001", 30 => "01001110001100100", 31 => "01111000010100010", 
    32 => "01101100111100001", 33 => "01011100000001111", 34 => "01100100110011100", 35 => "01010111000101111", 
    36 => "01011110101101110", 37 => "01001010010000000", 38 => "01011011000100111", 39 => "01001011011001001", 
    40 => "01110000011011100", 41 => "01000110010010000", 42 => "01100000100101010", 43 => "00111011111101010", 
    44 => "01010110001111110", 45 => "01010101010110001", 46 => "01101000011010100", 47 => "01001010101011000", 
    48 => "01011101101001101", 49 => "01001000110100010", 50 => "01001110000100100", 51 => "01001011110110100", 
    52 => "10100111010000001", 53 => "01000000001000111", 54 => "01100000000001010", 55 => "01001011110100000", 
    56 => "01011001011001001", 57 => "01011000001100100", 58 => "01010000110011100", 59 => "01101111101001111", 
    60 => "10100000100001110", 61 => "01011111101010111", 62 => "01001100101000001", 63 => "00111111110110010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;


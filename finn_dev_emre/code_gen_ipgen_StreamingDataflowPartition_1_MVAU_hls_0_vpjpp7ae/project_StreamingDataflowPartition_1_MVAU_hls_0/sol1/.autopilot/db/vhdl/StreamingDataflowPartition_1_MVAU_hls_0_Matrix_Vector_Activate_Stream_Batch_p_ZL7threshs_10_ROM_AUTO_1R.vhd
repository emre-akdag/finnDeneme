-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingDataflowPartition_1_MVAU_hls_0_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_10_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 17; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of StreamingDataflowPartition_1_MVAU_hls_0_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_10_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "01011000011100001", 1 => "01001110110101010", 2 => "01000110010110111", 3 => "01010110010010111", 
    4 => "01101000110111101", 5 => "01101010001001100", 6 => "01101101000110100", 7 => "01011100010100100", 
    8 => "01001011010010101", 9 => "01011001111000000", 10 => "00111001000001001", 11 => "00111010000011001", 
    12 => "01111000001100101", 13 => "01100101110011011", 14 => "01000000010110001", 15 => "01010100011110111", 
    16 => "10001010010011101", 17 => "00111111011000011", 18 => "01000100100100110", 19 => "01000010011111110", 
    20 => "01000100001100100", 21 => "01001110100010100", 22 => "10001011101110000", 23 => "01011001111100111", 
    24 => "01001010010010011", 25 => "01101110101010001", 26 => "01100011101110010", 27 => "01101111010110011", 
    28 => "00111100011001000", 29 => "01000110100000101", 30 => "01001000000001001", 31 => "01101011101101111", 
    32 => "01100011110110111", 33 => "01010011111101000", 34 => "01011100001001000", 35 => "01001111111000100", 
    36 => "01010111011100101", 37 => "01000100000010101", 38 => "01010001111010000", 39 => "01000100011000010", 
    40 => "01100111110000001", 41 => "01000000010100100", 42 => "01011001101000010", 43 => "00110101011101010", 
    44 => "01001110011011100", 45 => "01001110001110000", 46 => "01100001001100110", 47 => "01000011011010101", 
    48 => "01010101010000110", 49 => "01000010100110101", 50 => "01000111000001101", 51 => "01000101001110110", 
    52 => "10011000000011001", 53 => "00111010010110110", 54 => "01011000100111011", 55 => "01000100001010100", 
    56 => "01010000011110110", 57 => "01001110101010111", 58 => "01001001111011010", 59 => "01100100010110000", 
    60 => "10010001101110100", 61 => "01010110011100001", 62 => "01000101100100101", 63 => "00111001111010001");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;


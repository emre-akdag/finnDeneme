-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingDataflowPartition_1_MVAU_hls_0_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_3_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 15; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of StreamingDataflowPartition_1_MVAU_hls_0_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_3_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "100100011010000", 1 => "011010010110110", 2 => "010001110000011", 3 => "010010110010111", 
    4 => "011010101000001", 5 => "100111111010010", 6 => "011001101101001", 7 => "011000011100001", 
    8 => "011010110001111", 9 => "100000101100001", 10 => "001111001111110", 11 => "001110000000111", 
    12 => "011010111101101", 13 => "011000011100100", 14 => "010011111000011", 15 => "011001001000001", 
    16 => "011110101000111", 17 => "010101010100011", 18 => "001111011010011", 19 => "010110110101111", 
    20 => "010010000111010", 21 => "010101000110011", 22 => "101010110010011", 23 => "100010011110000", 
    24 => "011101011101110", 25 => "011001100100011", 26 => "100101010101010", 27 => "101001111010110", 
    28 => "010010110111110", 29 => "010010100111001", 30 => "011100110001010", 31 => "010011100001000", 
    32 => "100100010010101", 33 => "011011011010011", 34 => "011111100000010", 35 => "011101011010110", 
    36 => "100100100100011", 37 => "011000100101010", 38 => "010001101110001", 39 => "010011010001111", 
    40 => "101011000000100", 41 => "010110100110000", 42 => "101000111101110", 43 => "000111111101010", 
    44 => "010111101110000", 45 => "011100010100110", 46 => "101110101100010", 47 => "010000100111011", 
    48 => "011010100010110", 49 => "010111000111001", 50 => "010101101110001", 51 => "010110111001001", 
    52 => "101101101000100", 53 => "010001111000010", 54 => "100100110010001", 55 => "001110100111111", 
    56 => "010010000101110", 57 => "001011111111011", 58 => "011001110001110", 59 => "010101001010110", 
    60 => "101010000111101", 61 => "010101110101010", 62 => "010100001100101", 63 => "010000010100111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;


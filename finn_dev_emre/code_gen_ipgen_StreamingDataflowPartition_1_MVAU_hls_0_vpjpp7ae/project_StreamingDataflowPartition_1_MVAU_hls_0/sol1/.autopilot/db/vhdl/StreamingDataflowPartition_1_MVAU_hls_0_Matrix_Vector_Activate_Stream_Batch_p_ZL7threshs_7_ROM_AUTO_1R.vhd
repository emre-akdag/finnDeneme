-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingDataflowPartition_1_MVAU_hls_0_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_7_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 16; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of StreamingDataflowPartition_1_MVAU_hls_0_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_7_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1000010001001000", 1 => "0111000010101111", 2 => "0101111110100000", 3 => "0111001010111011", 
    4 => "1000111010101100", 5 => "1001101110000101", 6 => "1001001010111000", 7 => "0111111001110101", 
    8 => "0110110100000000", 9 => "1000001010111100", 10 => "0100111000111011", 11 => "0100111001011010", 
    12 => "1010000001111010", 13 => "1000100101001100", 14 => "0101101010010100", 15 => "0111011000010111", 
    16 => "1011100001010011", 17 => "0101101010110101", 18 => "0101101110010101", 19 => "0101111110010011", 
    20 => "0101110101110111", 21 => "0110101111011000", 22 => "1100010001011011", 23 => "1000010001011001", 
    24 => "0110111000101000", 25 => "1001010001100010", 26 => "1001000111111000", 27 => "1010001100110000", 
    28 => "0101010100110001", 29 => "0110000010001001", 30 => "0110101011110111", 31 => "1000101111010101", 
    32 => "1001000100111011", 33 => "0111011101110001", 34 => "1000010001001111", 35 => "0111010010000010", 
    36 => "1000001101001000", 37 => "0110001011010101", 38 => "0110110011001100", 39 => "0101111010101100", 
    40 => "1001101101110000", 41 => "0101110011100000", 42 => "1000100110001100", 43 => "0100001111101010", 
    44 => "0110110111110111", 45 => "0111000110101011", 46 => "1001011100011011", 47 => "0101101101001010", 
    48 => "0111100000110001", 49 => "0101111111101101", 50 => "0110001111001010", 51 => "0110001010111110", 
    52 => "1101010011100010", 53 => "0101001000000100", 54 => "1000010011001101", 55 => "0101101001101111", 
    56 => "0110101101111100", 57 => "0110010000101111", 58 => "0110101010010101", 59 => "1000010011010010", 
    60 => "1100101010100101", 61 => "0111010110000001", 62 => "0110000011010011", 63 => "0101000000101101");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;


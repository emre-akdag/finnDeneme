-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingDataflowPartition_1_MVAU_hls_0_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_1_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 16; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of StreamingDataflowPartition_1_MVAU_hls_0_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_1_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0010101100010100", 1 => "0001011010111001", 2 => "0000010101110100", 3 => "1111111100000100", 
    4 => "0000100010001100", 5 => "0010100111111000", 6 => "0000001111000001", 7 => "0000101000010111", 
    8 => "0001100111010111", 9 => "0010000010110100", 10 => "0000011010011111", 11 => "0000001011011101", 
    12 => "0000000010100110", 13 => "0000010010101111", 14 => "0000111001011011", 15 => "0001000001010110", 
    16 => "1111111111000001", 17 => "0001001010011010", 18 => "0000000001110010", 19 => "0001010010111101", 
    20 => "0000011110011011", 21 => "0000100101100000", 22 => "0001111000101111", 23 => "0010010100111100", 
    24 => "0010000101010001", 25 => "0000001010000100", 26 => "0010011100000100", 27 => "0010110000101010", 
    28 => "0000111000000101", 29 => "0000011110010001", 30 => "0010000011010011", 31 => "1111010010100010", 
    32 => "0010010001000010", 33 => "0001011010000100", 34 => "0001110001011011", 35 => "0001111000000000", 
    36 => "0010110000010000", 37 => "0001100001010100", 38 => "1111111011000100", 39 => "0000101010000000", 
    40 => "0011001101001101", 41 => "0001010101011001", 42 => "0011011000100000", 43 => "1111010111101010", 
    44 => "0001000000101100", 45 => "0001110000100011", 46 => "0100000010000110", 47 => "0000010000110011", 
    48 => "0001001110001000", 49 => "0001010101011110", 50 => "0000111101000100", 51 => "0001001101001110", 
    52 => "0001111001110100", 53 => "0000110010100001", 54 => "0010101111110010", 55 => "1111111010100110", 
    56 => "0000000010001000", 57 => "1111000111100000", 58 => "0001100000001011", 59 => "1111110100010111", 
    60 => "0001100100001001", 61 => "0000011010111111", 62 => "0000110000101110", 63 => "0000100011100100");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;


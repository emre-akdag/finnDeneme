-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingDataflowPartition_1_MVAU_hls_0_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_6_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 16; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of StreamingDataflowPartition_1_MVAU_hls_0_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_6_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0111010101101010", 1 => "0110000110110001", 2 => "0101000010011001", 3 => "0101111101110010", 
    4 => "0111100001010010", 5 => "1000100010011001", 6 => "0111101011100100", 7 => "0110101100010000", 
    8 => "0101111100100100", 9 => "0111001001100101", 10 => "0100001001001100", 11 => "0100000111000101", 
    12 => "1000010111010111", 13 => "0111001100110010", 14 => "0100110111100000", 15 => "0110010100100001", 
    16 => "1001100110010000", 17 => "0100111010110001", 18 => "0100110001100100", 19 => "0101001100011010", 
    20 => "0100111100101000", 21 => "0101101101101111", 22 => "1010100010101001", 23 => "0111010001111111", 
    24 => "0110000101011001", 25 => "0111110000010010", 26 => "1000000000100101", 27 => "1000111101011001", 
    28 => "0100100101010101", 29 => "0101000110110101", 30 => "0101111010011100", 31 => "0111001010100010", 
    32 => "0111111100010001", 33 => "0110011101001010", 34 => "0111001011111100", 35 => "0110011000010111", 
    36 => "0111010010111111", 37 => "0101011001101010", 38 => "0101101001110101", 39 => "0101000010100101", 
    40 => "1000101000010101", 41 => "0101000011110100", 42 => "0111101110100101", 43 => "0011011011101010", 
    44 => "0101111001010101", 45 => "0110001101101010", 46 => "1000100010101101", 47 => "0100110011000110", 
    48 => "0110011101101011", 49 => "0101001110000000", 50 => "0101010110110100", 51 => "0101010110000001", 
    52 => "1011011001111011", 53 => "0100011001110100", 54 => "0111010111111110", 55 => "0100101100100011", 
    56 => "0101100110101000", 57 => "0101000100100010", 58 => "0101110011010011", 59 => "0110111000110011", 
    60 => "1010110100001011", 61 => "0110001100001011", 62 => "0101001010110111", 63 => "0100010001001011");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;


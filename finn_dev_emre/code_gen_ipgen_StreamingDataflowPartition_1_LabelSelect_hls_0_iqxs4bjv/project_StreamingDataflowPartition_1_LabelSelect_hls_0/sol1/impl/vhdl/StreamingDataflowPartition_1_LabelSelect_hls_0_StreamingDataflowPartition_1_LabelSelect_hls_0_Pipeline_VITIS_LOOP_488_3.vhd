-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity StreamingDataflowPartition_1_LabelSelect_hls_0_StreamingDataflowPartition_1_LabelSelect_hls_0_Pipeline_VITIS_LOOP_488_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in0_V_TVALID : IN STD_LOGIC;
    in0_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    in0_V_TREADY : OUT STD_LOGIC;
    select_ln509_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    select_ln509_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of StreamingDataflowPartition_1_LabelSelect_hls_0_StreamingDataflowPartition_1_LabelSelect_hls_0_Pipeline_VITIS_LOOP_488_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln488_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in0_V_TDATA_blk_n : STD_LOGIC;
    signal empty_fu_42 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal select_ln509_1_fu_114_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_p_load : STD_LOGIC_VECTOR (3 downto 0);
    signal conv2_i_i12_lcssa_lcssa17_i2_fu_46 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln509_fu_105_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_conv2_i_i12_lcssa_lcssa17_i2_load : STD_LOGIC_VECTOR (7 downto 0);
    signal block_13_fu_50 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal block_fu_122_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_block_13_load : STD_LOGIC_VECTOR (3 downto 0);
    signal inval_fu_91_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal cmp_fu_95_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv2_i_i_i_fu_101_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component StreamingDataflowPartition_1_LabelSelect_hls_0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component StreamingDataflowPartition_1_LabelSelect_hls_0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    block_13_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                block_13_fu_50 <= block_fu_122_p2;
            end if;
        end if;
    end process;

    conv2_i_i12_lcssa_lcssa17_i2_fu_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                conv2_i_i12_lcssa_lcssa17_i2_fu_46 <= select_ln509_fu_105_p3;
            end if;
        end if;
    end process;

    empty_fu_42_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_fu_42 <= select_ln509_1_fu_114_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(in0_V_TVALID, ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((in0_V_TVALID = ap_const_logic_0) or (ap_start_int = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln488_fu_128_p2)
    begin
        if (((icmp_ln488_fu_128_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_block_13_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, block_13_fu_50)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_block_13_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_block_13_load <= block_13_fu_50;
        end if; 
    end process;


    ap_sig_allocacmp_conv2_i_i12_lcssa_lcssa17_i2_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, conv2_i_i12_lcssa_lcssa17_i2_fu_46)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_conv2_i_i12_lcssa_lcssa17_i2_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_conv2_i_i12_lcssa_lcssa17_i2_load <= conv2_i_i12_lcssa_lcssa17_i2_fu_46;
        end if; 
    end process;


    ap_sig_allocacmp_p_load_assign_proc : process(ap_CS_fsm_state1, empty_fu_42, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_p_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_p_load <= empty_fu_42;
        end if; 
    end process;

    block_fu_122_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_block_13_load) + unsigned(ap_const_lv4_1));
    cmp_fu_95_p2 <= "1" when (unsigned(inval_fu_91_p1) > unsigned(ap_sig_allocacmp_p_load)) else "0";
    conv2_i_i_i_fu_101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_block_13_load),8));
    icmp_ln488_fu_128_p2 <= "1" when (ap_sig_allocacmp_block_13_load = ap_const_lv4_9) else "0";

    in0_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, in0_V_TVALID, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            in0_V_TDATA_blk_n <= in0_V_TVALID;
        else 
            in0_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in0_V_TREADY_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in0_V_TREADY <= ap_const_logic_1;
        else 
            in0_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    inval_fu_91_p1 <= in0_V_TDATA(4 - 1 downto 0);
    select_ln509_1_fu_114_p3 <= 
        inval_fu_91_p1 when (cmp_fu_95_p2(0) = '1') else 
        ap_sig_allocacmp_p_load;
    select_ln509_fu_105_p3 <= 
        conv2_i_i_i_fu_101_p1 when (cmp_fu_95_p2(0) = '1') else 
        ap_sig_allocacmp_conv2_i_i12_lcssa_lcssa17_i2_load;
    select_ln509_out <= 
        conv2_i_i_i_fu_101_p1 when (cmp_fu_95_p2(0) = '1') else 
        ap_sig_allocacmp_conv2_i_i12_lcssa_lcssa17_i2_load;

    select_ln509_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln488_fu_128_p2, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln488_fu_128_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            select_ln509_out_ap_vld <= ap_const_logic_1;
        else 
            select_ln509_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;

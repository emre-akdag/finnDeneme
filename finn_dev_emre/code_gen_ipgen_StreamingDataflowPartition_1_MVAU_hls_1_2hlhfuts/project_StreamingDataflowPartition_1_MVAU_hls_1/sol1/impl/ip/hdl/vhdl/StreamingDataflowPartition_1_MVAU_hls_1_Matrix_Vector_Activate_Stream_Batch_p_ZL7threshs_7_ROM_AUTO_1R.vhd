-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingDataflowPartition_1_MVAU_hls_1_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_7_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 8; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of StreamingDataflowPartition_1_MVAU_hls_1_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_7_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "11010101", 1 => "10110110", 2 => "10101011", 3 => "11100011", 
    4 => "11010110", 5 => "10011111", 6 => "11101011", 7 => "11010010", 
    8 => "10101111", 9 => "11010110", 10 => "11101011", 11 => "11101001", 
    12 => "10101111", 13 => "11011001", 14 => "11010101", 15 => "11101101", 
    16 => "10100000", 17 => "10101100", 18 => "11000111", 19 => "10110110", 
    20 => "11011000", 21 => "11101000", 22 => "11000110", 23 => "11001010", 
    24 => "11011101", 25 => "11100100", 26 => "11010110", 27 => "11000100", 
    28 => "11001110", 29 => "10011101", 30 => "10110010", 31 => "10111101", 
    32 => "11000001", 33 => "10111111", 34 => "10111101", 35 => "11001000", 
    36 => "10111101", 37 => "10100011", 38 => "10110100", 39 => "11100100", 
    40 => "11011000", 41 => "11111000", 42 => "11000111", 43 => "10010010", 
    44 => "11001110", 45 => "11000001", 46 => "11001111", 47 => "10101010", 
    48 => "11010100", 49 => "10110100", 50 => "10110001", 51 => "11001001", 
    52 => "11010101", 53 => "10010110", 54 => "10101011", 55 => "11011110", 
    56 => "11001010", 57 => "11100010", 58 => "11001001", 59 => "10110101", 
    60 => "11000110", 61 => "11011000", 62 => "11110011", 63 => "10011000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;


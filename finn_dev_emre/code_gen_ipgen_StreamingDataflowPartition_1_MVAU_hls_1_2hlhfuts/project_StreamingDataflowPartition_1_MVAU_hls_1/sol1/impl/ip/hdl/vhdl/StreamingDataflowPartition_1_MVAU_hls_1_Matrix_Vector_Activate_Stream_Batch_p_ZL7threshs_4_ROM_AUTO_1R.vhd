-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingDataflowPartition_1_MVAU_hls_1_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_4_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 8; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of StreamingDataflowPartition_1_MVAU_hls_1_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_4_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "01111110", 1 => "01100001", 2 => "01011010", 3 => "10000110", 
    4 => "01111011", 5 => "01001010", 6 => "10001111", 7 => "01110111", 
    8 => "01100110", 9 => "01111101", 10 => "10001010", 11 => "10001011", 
    12 => "01011100", 13 => "10001001", 14 => "01111111", 15 => "10001000", 
    16 => "01010010", 17 => "01010100", 18 => "01110001", 19 => "01011100", 
    20 => "01111111", 21 => "10000110", 22 => "01110110", 23 => "01110100", 
    24 => "10001000", 25 => "10010000", 26 => "01111100", 27 => "01110110", 
    28 => "01111000", 29 => "01001110", 30 => "01011011", 31 => "01101101", 
    32 => "01101111", 33 => "01101110", 34 => "01101100", 35 => "01110011", 
    36 => "01100010", 37 => "01010001", 38 => "01100001", 39 => "10000001", 
    40 => "01110110", 41 => "10011001", 42 => "01110101", 43 => "01001000", 
    44 => "01111010", 45 => "01101011", 46 => "10000001", 47 => "01001001", 
    48 => "01111000", 49 => "01100010", 50 => "01011000", 51 => "01110011", 
    52 => "10000011", 53 => "01000000", 54 => "01010010", 55 => "10000001", 
    56 => "01111000", 57 => "10001011", 58 => "01110100", 59 => "01100111", 
    60 => "01110010", 61 => "01111010", 62 => "10001111", 63 => "01000010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;


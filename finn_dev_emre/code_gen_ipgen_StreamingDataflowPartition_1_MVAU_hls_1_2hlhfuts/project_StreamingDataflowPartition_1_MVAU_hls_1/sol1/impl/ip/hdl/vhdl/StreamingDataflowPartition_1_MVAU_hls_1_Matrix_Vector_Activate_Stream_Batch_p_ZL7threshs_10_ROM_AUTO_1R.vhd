-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingDataflowPartition_1_MVAU_hls_1_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_10_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 9; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of StreamingDataflowPartition_1_MVAU_hls_1_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_10_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "100101011", 1 => "100001010", 2 => "011111101", 3 => "101000000", 
    4 => "100110010", 5 => "011110100", 6 => "101000111", 7 => "100101101", 
    8 => "011111001", 9 => "100101110", 10 => "101001011", 11 => "101000111", 
    12 => "100000010", 13 => "100101000", 14 => "100101011", 15 => "101010010", 
    16 => "011101110", 17 => "100000100", 18 => "100011100", 19 => "100010000", 
    20 => "100110000", 21 => "101001001", 22 => "100010110", 23 => "100100000", 
    24 => "100110010", 25 => "100111000", 26 => "100101111", 27 => "100010010", 
    28 => "100100100", 29 => "011101011", 30 => "100001010", 31 => "100001101", 
    32 => "100010011", 33 => "100010000", 34 => "100001111", 35 => "100011101", 
    36 => "100010111", 37 => "011110110", 38 => "100000111", 39 => "101000111", 
    40 => "100111010", 41 => "101011000", 42 => "100011000", 43 => "011011011", 
    44 => "100100011", 45 => "100010111", 46 => "100011110", 47 => "100001011", 
    48 => "100110000", 49 => "100000101", 50 => "100001011", 51 => "100100000", 
    52 => "100100110", 53 => "011101100", 54 => "100000011", 55 => "100111011", 
    56 => "100011100", 57 => "100111010", 58 => "100011110", 59 => "100000011", 
    60 => "100011001", 61 => "100110101", 62 => "101010110", 63 => "011101111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;


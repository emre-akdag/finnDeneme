-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingDataflowPartition_1_MVAU_hls_1_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_9_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 9; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of StreamingDataflowPartition_1_MVAU_hls_1_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_9_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "100001110", 1 => "011101110", 2 => "011100010", 3 => "100100001", 
    4 => "100010011", 5 => "011010111", 6 => "100101001", 7 => "100001111", 
    8 => "011100000", 9 => "100010001", 10 => "100101011", 11 => "100101000", 
    12 => "011100111", 13 => "100001110", 14 => "100001111", 15 => "100110000", 
    16 => "011010100", 17 => "011100111", 18 => "100000000", 19 => "011110010", 
    20 => "100010011", 21 => "100101000", 22 => "011111011", 23 => "100000011", 
    24 => "100010101", 25 => "100011100", 26 => "100010001", 27 => "011111000", 
    28 => "100000111", 29 => "011010001", 30 => "011101100", 31 => "011110010", 
    32 => "011111000", 33 => "011110101", 34 => "011110100", 35 => "100000001", 
    36 => "011111001", 37 => "011011010", 38 => "011101011", 39 => "100100110", 
    40 => "100011001", 41 => "100111000", 42 => "011111101", 43 => "011000010", 
    44 => "100000111", 45 => "011111010", 46 => "100000100", 47 => "011101011", 
    48 => "100010010", 49 => "011101010", 50 => "011101101", 51 => "100000011", 
    52 => "100001011", 53 => "011001111", 54 => "011100101", 55 => "100011100", 
    56 => "100000001", 57 => "100011101", 58 => "100000010", 59 => "011101001", 
    60 => "011111101", 61 => "100010110", 62 => "100110101", 63 => "011010010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;


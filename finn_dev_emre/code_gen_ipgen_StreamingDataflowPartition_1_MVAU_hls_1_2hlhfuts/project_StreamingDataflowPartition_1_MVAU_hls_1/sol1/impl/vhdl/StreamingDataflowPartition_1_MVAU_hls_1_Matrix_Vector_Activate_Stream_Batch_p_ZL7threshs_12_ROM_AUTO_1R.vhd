-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingDataflowPartition_1_MVAU_hls_1_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_12_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 9; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of StreamingDataflowPartition_1_MVAU_hls_1_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_12_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "101100100", 1 => "101000010", 2 => "100110011", 3 => "101111110", 
    4 => "101101111", 5 => "100101100", 6 => "110000101", 7 => "101101010", 
    8 => "100101010", 9 => "101101010", 10 => "110001011", 11 => "110000110", 
    12 => "100111010", 13 => "101011101", 14 => "101100101", 15 => "110010101", 
    16 => "100100010", 17 => "100111111", 18 => "101010101", 19 => "101001101", 
    20 => "101101100", 21 => "110001001", 22 => "101001100", 23 => "101011001", 
    24 => "101101010", 25 => "101110001", 26 => "101101011", 27 => "101000111", 
    28 => "101011101", 29 => "100011111", 30 => "101000100", 31 => "101000011", 
    32 => "101001010", 33 => "101000110", 34 => "101000101", 35 => "101010110", 
    36 => "101010100", 37 => "100101101", 38 => "100111110", 39 => "110001001", 
    40 => "101111011", 41 => "110010111", 42 => "101001110", 43 => "100001100", 
    44 => "101011011", 45 => "101010000", 46 => "101010010", 47 => "101001100", 
    48 => "101101110", 49 => "100111100", 50 => "101000110", 51 => "101011010", 
    52 => "101011101", 53 => "100100110", 54 => "100111101", 55 => "101111001", 
    56 => "101010011", 57 => "101110100", 58 => "101010111", 59 => "100110111", 
    60 => "101010001", 61 => "101110011", 62 => "110011000", 63 => "100101000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;


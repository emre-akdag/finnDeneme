-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingDataflowPartition_1_MVAU_hls_1_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_3_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 7; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of StreamingDataflowPartition_1_MVAU_hls_1_Matrix_Vector_Activate_Stream_Batch_p_ZL7threshs_3_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1100010", 1 => "1000101", 2 => "0111111", 3 => "1100111", 
    4 => "1011100", 5 => "0101110", 6 => "1110000", 7 => "1011001", 
    8 => "1001101", 9 => "1011111", 10 => "1101010", 11 => "1101100", 
    12 => "1000000", 13 => "1101110", 14 => "1100010", 15 => "1100110", 
    16 => "0111000", 17 => "0110111", 18 => "1010100", 19 => "0111110", 
    20 => "1100001", 21 => "1100110", 22 => "1011011", 23 => "1011000", 
    24 => "1101100", 25 => "1110100", 26 => "1011111", 27 => "1011100", 
    28 => "1011100", 29 => "0110100", 30 => "0111101", 31 => "1010010", 
    32 => "1010011", 33 => "1010011", 34 => "1010001", 35 => "1010111", 
    36 => "1000100", 37 => "0110101", 38 => "1000101", 39 => "1100000", 
    40 => "1010101", 41 => "1111001", 42 => "1011010", 43 => "0110000", 
    44 => "1011101", 45 => "1001111", 46 => "1100111", 47 => "0101001", 
    48 => "1011001", 49 => "1000111", 50 => "0111010", 51 => "1010110", 
    52 => "1100111", 53 => "0100011", 54 => "0110101", 55 => "1100010", 
    56 => "1011100", 57 => "1101110", 58 => "1011000", 59 => "1001101", 
    60 => "1010110", 61 => "1011011", 62 => "1101110", 63 => "0100101");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

